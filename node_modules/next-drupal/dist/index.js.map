{"version":3,"file":"index.js","sources":["../src/get-cache.ts","../src/get-access-token.ts","../src/utils.ts","../src/get-menu.ts","../src/get-resource-collection.ts","../src/get-paths.ts","../src/get-resource.ts","../src/preview.ts","../src/get-resource-type.ts","../src/get-view.ts","../src/use-menu.tsx"],"sourcesContent":["import NodeCache from \"node-cache\"\n\nexport const cache = new NodeCache()\n","import { cache } from \"./get-cache\"\nimport { AccessToken } from \"./types\"\n\nconst CACHE_KEY = \"NEXT_DRUPAL_ACCESS_TOKEN\"\n\nexport async function getAccessToken(): Promise<AccessToken> {\n  if (!process.env.DRUPAL_CLIENT_ID || !process.env.DRUPAL_CLIENT_SECRET) {\n    return null\n  }\n\n  const cached = cache.get<AccessToken>(CACHE_KEY)\n  if (cached?.access_token) {\n    return cached\n  }\n\n  const basic = Buffer.from(\n    `${process.env.DRUPAL_CLIENT_ID}:${process.env.DRUPAL_CLIENT_SECRET}`\n  ).toString(\"base64\")\n\n  const response = await fetch(\n    `${process.env.NEXT_PUBLIC_DRUPAL_BASE_URL}/oauth/token`,\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: `Basic ${basic}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: `grant_type=client_credentials`,\n    }\n  )\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const result: AccessToken = await response.json()\n\n  cache.set(CACHE_KEY, result, result.expires_in)\n\n  return result\n}\n","import { GetStaticPropsContext } from \"next\"\nimport Jsona from \"jsona\"\nimport { getAccessToken } from \"./get-access-token\"\nimport { AccessToken, Locale } from \"./types\"\nimport { stringify } from \"qs\"\n\nconst JSONAPI_PREFIX = process.env.DRUPAL_JSONAPI_PREFIX || \"/jsonapi\"\n\nconst dataFormatter = new Jsona()\n\nexport function deserialize(body, options?) {\n  if (!body) return null\n\n  return dataFormatter.deserialize(body, options)\n}\n\nexport async function getJsonApiPathForResourceType(\n  type: string,\n  locale?: Locale\n) {\n  const index = await getJsonApiIndex(locale)\n\n  return index?.links[type]?.href\n}\n\nexport async function getJsonApiIndex(\n  locale?: Locale,\n  options?: {\n    accessToken?: AccessToken\n  }\n): Promise<{\n  links: {\n    [type: string]: {\n      href: string\n    }\n  }\n}> {\n  const url = buildUrl(\n    locale ? `/${locale}${JSONAPI_PREFIX}` : `${JSONAPI_PREFIX}`\n  )\n\n  const response = await fetch(url.toString(), {\n    headers: await buildHeaders(options),\n  })\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  return await response.json()\n}\n\nexport function buildUrl(\n  path: string,\n  params?: string | Record<string, string> | URLSearchParams\n): URL {\n  const url = new URL(\n    path.charAt(0) === \"/\"\n      ? `${process.env.NEXT_PUBLIC_DRUPAL_BASE_URL}${path}`\n      : path\n  )\n\n  if (params) {\n    // Use instead URLSearchParams for nested params.\n    url.search = stringify(params)\n  }\n\n  return url\n}\n\nexport async function buildHeaders({\n  accessToken,\n  headers = {\n    \"Content-Type\": \"application/json\",\n  },\n}: {\n  accessToken?: AccessToken\n  headers?: RequestInit[\"headers\"]\n} = {}): Promise<RequestInit[\"headers\"]> {\n  const token = accessToken || (await getAccessToken())\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token.access_token}`\n  }\n\n  return headers\n}\n\nexport function getPathFromContext(\n  context: GetStaticPropsContext,\n  prefix = \"\"\n) {\n  let { slug } = context.params\n\n  slug = Array.isArray(slug) ? slug.join(\"/\") : slug\n\n  // Handle locale.\n  if (context.locale && context.locale !== context.defaultLocale) {\n    slug = `/${context.locale}/${slug}`\n  }\n\n  return !slug\n    ? process.env.DRUPAL_FRONT_PAGE\n    : prefix\n    ? `${prefix}/${slug}`\n    : slug\n}\n\nexport function syncDrupalPreviewRoutes(path) {\n  if (window && window.top !== window.self) {\n    window.parent.postMessage(\n      { type: \"NEXT_DRUPAL_ROUTE_SYNC\", path },\n      process.env.NEXT_PUBLIC_DRUPAL_BASE_URL\n    )\n  }\n}\n","import {\n  AccessToken,\n  DrupalMenuLinkContent,\n  JsonApiWithLocaleOptions,\n} from \"./types\"\nimport { buildHeaders, buildUrl, deserialize } from \"./utils\"\n\nexport async function getMenu(\n  name: string,\n  options?: {\n    deserialize?: boolean\n    accessToken?: AccessToken\n  } & JsonApiWithLocaleOptions\n): Promise<{\n  items: DrupalMenuLinkContent[]\n  tree: DrupalMenuLinkContent[]\n}> {\n  options = {\n    deserialize: true,\n    ...options,\n  }\n\n  const localePrefix =\n    options?.locale && options.locale !== options.defaultLocale\n      ? `/${options.locale}`\n      : \"\"\n\n  const url = buildUrl(`${localePrefix}/jsonapi/menu_items/${name}`)\n\n  const response = await fetch(url.toString(), {\n    headers: await buildHeaders(options),\n  })\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const data = await response.json()\n\n  const items = options.deserialize ? deserialize(data) : data\n\n  const { items: tree } = buildMenuTree(items)\n\n  return {\n    items,\n    tree,\n  }\n}\n\nfunction buildMenuTree(\n  links: DrupalMenuLinkContent[],\n  parent: DrupalMenuLinkContent[\"id\"] = \"\"\n) {\n  const children = links.filter((link) => link.parent === parent)\n\n  return children.length\n    ? {\n        items: children.map((link) => ({\n          ...link,\n          ...buildMenuTree(links, link.id),\n        })),\n      }\n    : {}\n}\n","import { GetStaticPropsContext } from \"next\"\nimport {\n  AccessToken,\n  JsonApiParams,\n  JsonApiWithLocaleOptions,\n  JsonApiResource,\n} from \"./types\"\nimport {\n  buildHeaders,\n  buildUrl,\n  deserialize,\n  getJsonApiPathForResourceType,\n} from \"./utils\"\n\nexport async function getResourceCollection<T = JsonApiResource[]>(\n  type: string,\n  options?: {\n    deserialize?: boolean\n    accessToken?: AccessToken\n  } & JsonApiWithLocaleOptions\n): Promise<T> {\n  options = {\n    deserialize: true,\n    ...options,\n  }\n\n  const apiPath = await getJsonApiPathForResourceType(\n    type,\n    options?.locale !== options?.defaultLocale ? options.locale : undefined\n  )\n\n  if (!apiPath) {\n    throw new Error(`Error: resource of type ${type} not found.`)\n  }\n\n  const url = buildUrl(apiPath, {\n    ...options?.params,\n  })\n\n  const response = await fetch(url.toString(), {\n    headers: await buildHeaders(options),\n  })\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const json = await response.json()\n\n  return options.deserialize ? deserialize(json) : json\n}\n\nexport async function getResourceCollectionFromContext<T = JsonApiResource[]>(\n  type: string,\n  context: GetStaticPropsContext,\n  options?: {\n    deserialize?: boolean\n    params?: JsonApiParams\n  }\n): Promise<T> {\n  options = {\n    deserialize: true,\n    ...options,\n  }\n\n  // // Filter out unpublished entities.\n  // if (!context.preview) {\n  //   options.params = {\n  //     \"filter[status]\": \"1\",\n  //     ...options.params,\n  //   }\n  // }\n\n  return await getResourceCollection<T>(type, {\n    ...options,\n    locale: context.locale,\n    defaultLocale: context.defaultLocale,\n  })\n}\n","import { GetStaticPathsContext, GetStaticPathsResult } from \"next\"\nimport { getResourceCollection } from \"./get-resource-collection\"\nimport { AccessToken, JsonApiParams, Locale } from \"./types\"\n\nexport async function getPathsFromContext(\n  types: string | string[],\n  context: GetStaticPathsContext,\n  options: {\n    params?: JsonApiParams\n    accessToken?: AccessToken\n  } = {}\n): Promise<GetStaticPathsResult[\"paths\"]> {\n  if (typeof types === \"string\") {\n    types = [types]\n  }\n\n  const paths = await Promise.all(\n    types.map(async (type) => {\n      // Use sparse fieldset to expand max size.\n      options.params = {\n        [`fields[${type}]`]: \"path\",\n        ...options?.params,\n      }\n\n      // const paths = await Promise.all(\n      //   context.locales.map(async (locale) => {\n      //     const resources = await getResourceCollection(type, {\n      //       deserialize: true,\n      //       locale,\n      //       defaultLocale: context.defaultLocale,\n      //       ...options,\n      //     })\n\n      //     return buildPathsFromResources(resources, locale)\n      //   })\n      // )\n\n      // return paths.flat()\n\n      // Handle localized path aliases\n      if (!context.locales?.length) {\n        const resources = await getResourceCollection(type, {\n          deserialize: true,\n          ...options,\n        })\n\n        return buildPathsFromResources(resources)\n      }\n\n      const paths = await Promise.all(\n        context.locales.map(async (locale) => {\n          const resources = await getResourceCollection(type, {\n            deserialize: true,\n            locale,\n            defaultLocale: context.defaultLocale,\n            ...options,\n          })\n\n          return buildPathsFromResources(resources, locale)\n        })\n      )\n\n      return paths.flat()\n    })\n  )\n\n  return paths.flat()\n}\n\nfunction buildPathsFromResources(resources, locale?: Locale) {\n  return resources?.flatMap((resource) => {\n    const slug =\n      resource?.path?.alias === process.env.DRUPAL_FRONT_PAGE\n        ? \"/\"\n        : resource?.path?.alias\n\n    const path = {\n      params: {\n        slug: `${slug?.replace(/^\\/|\\/$/g, \"\")}`.split(\"/\"),\n      },\n    }\n\n    if (locale) {\n      path[\"locale\"] = locale\n    }\n\n    return path\n  })\n}\n","import { GetStaticPropsContext } from \"next\"\nimport {\n  AccessToken,\n  JsonApiParams,\n  JsonApiWithLocaleOptions,\n  JsonApiResource,\n} from \"./types\"\nimport {\n  buildHeaders,\n  buildUrl,\n  deserialize,\n  getJsonApiPathForResourceType,\n  getPathFromContext,\n} from \"./utils\"\n\nexport async function getResourceFromContext<T extends JsonApiResource>(\n  type: string,\n  context: GetStaticPropsContext,\n  options?: {\n    prefix?: string\n    deserialize?: boolean\n    params?: JsonApiParams\n    accessToken?: AccessToken\n    isVersionable?: boolean\n  }\n): Promise<T> {\n  options = {\n    deserialize: true,\n    // Add support for revisions for node by default.\n    // TODO: Make this required before stable?\n    isVersionable: /^node--/.test(type),\n    ...options,\n  }\n\n  const path = getPathFromContext(context, options?.prefix)\n\n  // Filter out unpublished entities.\n  // if (!context.preview) {\n  //   options.params = {\n  //     \"filter[status]\": \"1\",\n  //     ...options?.params,\n  //   }\n  // }\n\n  const previewData = context.previewData as { resourceVersion?: string }\n\n  const resource = await getResourceByPath<T>(path, {\n    deserialize: options.deserialize,\n    isVersionable: options.isVersionable,\n    locale: context.locale,\n    defaultLocale: context.defaultLocale,\n    params: {\n      resourceVersion: previewData?.resourceVersion,\n      ...options?.params,\n    },\n  })\n\n  // If no locale is passed, skip entity if not default_langcode.\n  // This happens because decoupled_router will still translate the path\n  // to a resource.\n  // TODO: Figure out if we want this behavior.\n  // For now this causes a bug where a non-i18n sites builds (ISR) pages for\n  // localized pages.\n  if (!context.locale && !resource?.default_langcode) {\n    return null\n  }\n\n  return resource\n}\n\nexport async function getResourceByPath<T extends JsonApiResource>(\n  path: string,\n  options?: {\n    accessToken?: AccessToken\n    deserialize?: boolean\n    isVersionable?: boolean\n  } & JsonApiWithLocaleOptions\n): Promise<T> {\n  options = {\n    deserialize: true,\n    isVersionable: false,\n    params: {},\n    ...options,\n  }\n\n  if (!path) {\n    return null\n  }\n\n  if (\n    options.locale &&\n    options.defaultLocale &&\n    path.indexOf(options.locale) !== 1\n  ) {\n    path = path === \"/\" ? path : path.replace(/^\\/+/, \"\")\n    path = getPathFromContext({\n      params: { slug: [path] },\n      locale: options.locale,\n      defaultLocale: options.defaultLocale,\n    })\n  }\n\n  const { resourceVersion = \"rel:latest-version\", ...params } = options?.params\n  const resourceParams = new URLSearchParams({\n    ...params,\n  })\n\n  if (options.isVersionable) {\n    resourceParams.set(\"resourceVersion\", resourceVersion)\n  }\n\n  const payload = [\n    {\n      requestId: \"router\",\n      action: \"view\",\n      uri: `/router/translate-path?path=${path}&_format=json`,\n      headers: { Accept: \"application/vnd.api+json\" },\n    },\n    {\n      requestId: \"resolvedResource\",\n      action: \"view\",\n      uri: `{{router.body@$.jsonapi.individual}}?${resourceParams.toString()}`,\n      waitFor: [\"router\"],\n    },\n  ]\n\n  // Localized subrequests.\n  // I was hoping we would not need this but it seems like subrequests is not properly\n  // setting the jsonapi locale from a translated path.\n  let subrequestsPath = \"/subrequests\"\n  if (\n    options.locale &&\n    options.defaultLocale &&\n    options.locale !== options.defaultLocale\n  ) {\n    subrequestsPath = `/${options.locale}/subrequests`\n  }\n\n  const url = buildUrl(subrequestsPath, {\n    _format: \"json\",\n  })\n\n  const response = await fetch(url.toString(), {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: await buildHeaders(options),\n    redirect: \"follow\",\n    body: JSON.stringify(payload),\n  })\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const json = await response.json()\n\n  if (!json[\"resolvedResource#uri{0}\"]) {\n    return null\n  }\n\n  const data = JSON.parse(json[\"resolvedResource#uri{0}\"]?.body)\n\n  if (data.errors) {\n    throw new Error(data.errors[0].detail)\n  }\n\n  return options.deserialize ? deserialize(data) : data\n}\n\nexport async function getResource<T extends JsonApiResource>(\n  type: string,\n  uuid: string,\n  options?: {\n    accessToken?: AccessToken\n    deserialize?: boolean\n  } & JsonApiWithLocaleOptions\n): Promise<T> {\n  options = {\n    deserialize: true,\n    params: {},\n    ...options,\n  }\n\n  const apiPath = await getJsonApiPathForResourceType(\n    type,\n    options?.locale !== options?.defaultLocale ? options.locale : undefined\n  )\n\n  if (!apiPath) {\n    throw new Error(`Error: resource of type ${type} not found.`)\n  }\n\n  const url = buildUrl(`${apiPath}/${uuid}`, {\n    ...options?.params,\n  })\n\n  const response = await fetch(url.toString(), {\n    headers: await buildHeaders(options),\n  })\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const json = await response.json()\n\n  return options.deserialize ? deserialize(json) : json\n}\n","import { NextApiRequest, NextApiResponse } from \"next\"\nimport { getResourceByPath } from \"./get-resource\"\nimport { JsonApiWithLocaleOptions } from \"./types\"\n\ninterface PreviewOptions {\n  errorMessages?: {\n    secret?: string\n    slug?: string\n  }\n}\n\nexport function DrupalPreview(options?: PreviewOptions) {\n  return (request, response) => PreviewHandler(request, response, options)\n}\n\nexport async function PreviewHandler(\n  request?: NextApiRequest,\n  response?: NextApiResponse,\n  options?: PreviewOptions\n) {\n  const { slug, resourceVersion, secret, locale, defaultLocale } = request.query\n\n  if (secret !== process.env.DRUPAL_PREVIEW_SECRET) {\n    return response.status(401).json({\n      message: options?.errorMessages.secret || \"Invalid preview secret.\",\n    })\n  }\n\n  if (!slug) {\n    return response\n      .status(401)\n      .end({ message: options?.errorMessages.slug || \"Invalid slug.\" })\n  }\n\n  let _options: GetResourcePreviewUrlOptions = {\n    isVersionable: typeof resourceVersion !== \"undefined\",\n  }\n  if (locale && defaultLocale) {\n    _options = {\n      ..._options,\n      locale: locale as string,\n      defaultLocale: defaultLocale as string,\n    }\n  }\n\n  const url = await getResourcePreviewUrl(slug as string, _options)\n\n  if (!url) {\n    response\n      .status(404)\n      .end({ message: options?.errorMessages.slug || \"Invalid slug\" })\n  }\n\n  response.setPreviewData({\n    resourceVersion,\n  })\n\n  response.writeHead(307, { Location: url })\n\n  return response.end()\n}\n\ntype GetResourcePreviewUrlOptions = JsonApiWithLocaleOptions & {\n  isVersionable?: boolean\n}\n\nexport async function getResourcePreviewUrl(\n  slug: string,\n  options?: GetResourcePreviewUrlOptions\n) {\n  const entity = await getResourceByPath(slug, options)\n\n  if (!entity) {\n    return null\n  }\n\n  if (!entity?.path) {\n    throw new Error(\n      `Error: the path attribute is missing for entity type ${entity.type}`\n    )\n  }\n\n  return entity?.default_langcode\n    ? entity.path.alias\n    : `/${entity.path.langcode}${entity.path.alias}`\n}\n","import { GetStaticPropsContext } from \"next\"\nimport { AccessToken } from \"./types\"\nimport { buildHeaders, buildUrl, getPathFromContext } from \"./utils\"\n\nexport async function getResourceTypeFromContext(\n  context: GetStaticPropsContext,\n  options?: {\n    accessToken?: AccessToken\n    prefix?: string\n  }\n): Promise<string> {\n  options = {\n    prefix: \"\",\n    ...options,\n  }\n  const url = buildUrl(\"/router/translate-path\", {\n    path: getPathFromContext(context, options.prefix),\n  })\n\n  const response = await fetch(url.toString(), {\n    headers: await buildHeaders(options),\n  })\n\n  if (response.status === 404) {\n    return null\n  }\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const json = await response.json()\n\n  return json.jsonapi.resourceName\n}\n","import { AccessToken, JsonApiWithLocaleOptions } from \"./types\"\nimport { buildHeaders, buildUrl, deserialize } from \"./utils\"\n\nexport async function getView<T>(\n  name: string,\n  options?: {\n    deserialize?: boolean\n    accessToken?: AccessToken\n  } & JsonApiWithLocaleOptions\n): Promise<{\n  results: T\n  /* eslint-disable  @typescript-eslint/no-explicit-any */\n  meta: Record<string, any>\n  links: {\n    [key in \"next\" | \"prev\" | \"self\"]?: {\n      href: \"string\"\n    }\n  }\n}> {\n  options = {\n    deserialize: true,\n    ...options,\n  }\n\n  const localePrefix =\n    options?.locale && options.locale !== options.defaultLocale\n      ? `/${options.locale}`\n      : \"\"\n\n  const [viewId, displayId] = name.split(\"--\")\n\n  const url = buildUrl(\n    `${localePrefix}/jsonapi/views/${viewId}/${displayId}`,\n    options.params\n  )\n\n  const response = await fetch(url.toString(), {\n    headers: await buildHeaders(options),\n  })\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const data = await response.json()\n\n  const results = options.deserialize ? deserialize(data) : data\n\n  return {\n    results,\n    meta: data.meta,\n    links: data.links,\n  }\n}\n","import * as React from \"react\"\nimport { useRouter } from \"next/router\"\n\nimport { getMenu } from \"./get-menu\"\nimport { DrupalMenuLinkContent } from \"./types\"\n\nexport function useMenu(\n  name: string\n): {\n  items: DrupalMenuLinkContent[]\n  tree: DrupalMenuLinkContent[]\n  error: unknown\n  isLoading: boolean\n} {\n  const router = useRouter()\n  const [data, setData] = React.useState<{\n    items: DrupalMenuLinkContent[]\n    tree: DrupalMenuLinkContent[]\n  }>(null)\n  const [error, setError] = React.useState(null)\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\n\n  React.useEffect(() => {\n    const fetchMenuItems = async () => {\n      setIsLoading(true)\n      try {\n        const data = await getMenu(name, {\n          locale: router.locale,\n          defaultLocale: router.defaultLocale,\n        })\n        setData(data)\n        setIsLoading(false)\n      } catch (error) {\n        setError(error)\n        setIsLoading(false)\n      }\n    }\n    fetchMenuItems()\n  }, [router.locale])\n\n  return { ...data, error, isLoading }\n}\n"],"names":["cache","NodeCache","getAccessToken","process","env","DRUPAL_CLIENT_ID","DRUPAL_CLIENT_SECRET","cached","get","CACHE_KEY","access_token","basic","Buffer","from","toString","fetch","NEXT_PUBLIC_DRUPAL_BASE_URL","method","headers","Authorization","body","response","ok","Error","statusText","json","result","set","expires_in","buildHeaders","accessToken","token","getJsonApiIndex","locale","options","url","buildUrl","JSONAPI_PREFIX","getJsonApiPathForResourceType","type","index","links","href","DRUPAL_JSONAPI_PREFIX","dataFormatter","Jsona","deserialize","path","params","URL","charAt","search","stringify","getPathFromContext","context","prefix","slug","Array","isArray","join","defaultLocale","DRUPAL_FRONT_PAGE","syncDrupalPreviewRoutes","window","top","self","parent","postMessage","getMenu","name","localePrefix","data","items","buildMenuTree","tree","children","filter","link","length","map","id","getResourceCollectionFromContext","getResourceCollection","undefined","apiPath","getPathsFromContext","types","Promise","all","locales","resources","buildPathsFromResources","paths","flat","flatMap","resource","alias","replace","split","getResource","uuid","getResourceByPath","isVersionable","indexOf","resourceVersion","resourceParams","URLSearchParams","payload","requestId","action","uri","Accept","waitFor","subrequestsPath","_format","credentials","redirect","JSON","parse","errors","detail","getResourceFromContext","test","previewData","default_langcode","getResourcePreviewUrl","entity","langcode","PreviewHandler","request","query","secret","DRUPAL_PREVIEW_SECRET","status","message","errorMessages","end","_options","setPreviewData","writeHead","Location","DrupalPreview","getResourceTypeFromContext","jsonapi","resourceName","getView","viewId","displayId","results","meta","useMenu","router","useRouter","React","setData","error","setError","isLoading","setIsLoading","fetchMenuItems"],"mappings":";;;;;;;;AAEO,IAAMA,KAAK,GAAG,IAAIC,SAAJ,EAAd;;ICGeC,cAAtB,YAAsBA,cAAtB;AAAA;AACE,QAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,gBAAb,IAAiC,CAACF,OAAO,CAACC,GAAR,CAAYE,oBAAlD,EAAwE;AACtE,6BAAO,IAAP;AACD;;AAED,QAAMC,MAAM,GAAGP,KAAK,CAACQ,GAAN,CAAuBC,SAAvB,CAAf;;AACA,QAAIF,MAAJ,oBAAIA,MAAM,CAAEG,YAAZ,EAA0B;AACxB,6BAAOH,MAAP;AACD;;AAED,QAAMI,KAAK,GAAGC,MAAM,CAACC,IAAP,CACTV,OAAO,CAACC,GAAR,CAAYC,gBADH,SACuBF,OAAO,CAACC,GAAR,CAAYE,oBADnC,EAEZQ,QAFY,CAEH,QAFG,CAAd;2BAIuBC,KAAK,CACvBZ,OAAO,CAACC,GAAR,CAAYY,2BADW,mBAE1B;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,aAAWR,KADjB;AAEP,wBAAgB;AAFT,OAFX;AAMES,MAAAA,IAAI;AANN,KAF0B,kBAAtBC;AAYN,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACD;;6BAEiCH,QAAQ,CAACI,IAAT,mBAA5BC;AAEN1B,QAAAA,KAAK,CAAC2B,GAAN,CAAUlB,SAAV,EAAqBiB,MAArB,EAA6BA,MAAM,CAACE,UAApC;AAEA,eAAOF,MAAP;;;AACD,GAnCD;AAAA;AAAA;AAAA;AAFA,IAAMjB,SAAS,GAAG,0BAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICmEsBoB,YAAtB,YAAsBA,YAAtB;AAAA,iCAQI,EARJ;AAAA,MACEC,WADF,QACEA,WADF;AAAA,0BAEEZ,OAFF;AAAA,MAEEA,OAFF,6BAEY;AACR,oBAAgB;AADR,GAFZ;;AAAA;iCASQa;AACN,UAAIA,KAAJ,EAAW;AACTb,QAAAA,OAAO,CAAC,eAAD,CAAP,eAAqCa,KAAK,CAACrB,YAA3C;AACD;;AAED,aAAOQ,OAAP;;;2BALcY,qBAAAA,+BAAsB5B,cAAc;AAMnD,GAfD;AAAA;AAAA;AAAA;AA7CA,IAAsB8B,eAAtB,YAAsBA,eAAtB,CACEC,MADF,EAEEC,OAFF;AAAA;AAYE,QAAMC,GAAG,GAAGC,QAAQ,CAClBH,MAAM,SAAOA,MAAP,GAAgBI,cAAhB,QAAsCA,cAD1B,CAApB;;kBAIuBtB;yBAAMoB,GAAG,CAACrB,QAAJ;;2BACZe,YAAY,CAACK,OAAD;6BADN,wBAAsB;AAC3ChB,QAAAA,OAAO;AADoC,OAAtB,kBAAjBG;AAIN,YAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,gBAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACD;;+BAEYH,QAAQ,CAACI,IAAT;;;AACd,GAzBD;AAAA;AAAA;AAAA;AATA,IAAsBa,6BAAtB,YAAsBA,6BAAtB,CACEC,IADF,EAEEN,MAFF;AAAA;2BAIsBD,eAAe,CAACC,MAAD,kBAA7BO;;;AAEN,aAAOA,KAAP,yCAAOA,KAAK,CAAEC,KAAP,CAAaF,IAAb,CAAP,qBAAO,kBAAoBG,IAA3B;;AACD,GAPD;AAAA;AAAA;AAAA;AAVA,IAAML,cAAc,GAAGlC,OAAO,CAACC,GAAR,CAAYuC,qBAAZ,IAAqC,UAA5D;AAEA,IAAMC,aAAa,GAAG,IAAIC,KAAJ,EAAtB;AAEA,SAAgBC,YAAY1B,MAAMc;AAChC,MAAI,CAACd,IAAL,EAAW,OAAO,IAAP;AAEX,SAAOwB,aAAa,CAACE,WAAd,CAA0B1B,IAA1B,EAAgCc,OAAhC,CAAP;AACD;AAsCD,SAAgBE,SACdW,MACAC;AAEA,MAAMb,GAAG,GAAG,IAAIc,GAAJ,CACVF,IAAI,CAACG,MAAL,CAAY,CAAZ,MAAmB,GAAnB,QACO/C,OAAO,CAACC,GAAR,CAAYY,2BADnB,GACiD+B,IADjD,GAEIA,IAHM,CAAZ;;AAMA,MAAIC,MAAJ,EAAY;AACV;AACAb,IAAAA,GAAG,CAACgB,MAAJ,GAAaC,YAAS,CAACJ,MAAD,CAAtB;AACD;;AAED,SAAOb,GAAP;AACD;AAmBD,SAAgBkB,mBACdC,SACAC;MAAAA;AAAAA,IAAAA,SAAS;;;MAEHC,OAASF,OAAO,CAACN,OAAjBQ;AAENA,EAAAA,IAAI,GAAGC,KAAK,CAACC,OAAN,CAAcF,IAAd,IAAsBA,IAAI,CAACG,IAAL,CAAU,GAAV,CAAtB,GAAuCH,IAA9C;;AAGA,MAAIF,OAAO,CAACrB,MAAR,IAAkBqB,OAAO,CAACrB,MAAR,KAAmBqB,OAAO,CAACM,aAAjD,EAAgE;AAC9DJ,IAAAA,IAAI,SAAOF,OAAO,CAACrB,MAAf,SAAyBuB,IAA7B;AACD;;AAED,SAAO,CAACA,IAAD,GACHrD,OAAO,CAACC,GAAR,CAAYyD,iBADT,GAEHN,MAAM,GACHA,MADG,SACOC,IADP,GAENA,IAJJ;AAKD;AAED,SAAgBM,wBAAwBf;AACtC,MAAIgB,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeD,MAAM,CAACE,IAApC,EAA0C;AACxCF,IAAAA,MAAM,CAACG,MAAP,CAAcC,WAAd,CACE;AAAE5B,MAAAA,IAAI,EAAE,wBAAR;AAAkCQ,MAAAA,IAAI,EAAJA;AAAlC,KADF,EAEE5C,OAAO,CAACC,GAAR,CAAYY,2BAFd;AAID;AACF;;IC3GqBoD,OAAtB,YAAsBA,OAAtB,CACEC,IADF,EAEEnC,OAFF;AAAA;;;AAUEA,IAAAA,OAAO;AACLY,MAAAA,WAAW,EAAE;AADR,OAEFZ,OAFE,CAAP;AAKA,QAAMoC,YAAY,GAChB,aAAApC,OAAO,SAAP,qBAASD,MAAT,KAAmBC,OAAO,CAACD,MAAR,KAAmBC,OAAO,CAAC0B,aAA9C,SACQ1B,OAAO,CAACD,MADhB,GAEI,EAHN;AAKA,QAAME,GAAG,GAAGC,QAAQ,CAAIkC,YAAJ,4BAAuCD,IAAvC,CAApB;;kBAEuBtD;yBAAMoB,GAAG,CAACrB,QAAJ;;2BACZe,YAAY,CAACK,OAAD;6BADN,wBAAsB;AAC3ChB,QAAAA,OAAO;AADoC,OAAtB,kBAAjBG;AAIN,YAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,gBAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACD;;+BAEkBH,QAAQ,CAACI,IAAT,mBAAb8C;AAEN,cAAMC,KAAK,GAAGtC,OAAO,CAACY,WAAR,GAAsBA,WAAW,CAACyB,IAAD,CAAjC,GAA0CA,IAAxD;;+BAEwBE,aAAa,CAACD,KAAD;cAAtBE,sBAAPF;;AAER,iBAAO;AACLA,YAAAA,KAAK,EAALA,KADK;AAELE,YAAAA,IAAI,EAAJA;AAFK,WAAP;;;;AAID,GAxCD;AAAA;AAAA;AAAA;;AA0CA,SAASD,aAAT,CACEhC,KADF,EAEEyB,MAFF;MAEEA;AAAAA,IAAAA,SAAsC;;;AAEtC,MAAMS,QAAQ,GAAGlC,KAAK,CAACmC,MAAN,CAAa,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACX,MAAL,KAAgBA,MAA1B;AAAA,GAAb,CAAjB;AAEA,SAAOS,QAAQ,CAACG,MAAT,GACH;AACEN,IAAAA,KAAK,EAAEG,QAAQ,CAACI,GAAT,CAAa,UAACF,IAAD;AAAA,0BACfA,IADe,EAEfJ,aAAa,CAAChC,KAAD,EAAQoC,IAAI,CAACG,EAAb,CAFE;AAAA,KAAb;AADT,GADG,GAOH,EAPJ;AAQD;;ICXqBC,gCAAtB,YAAsBA,gCAAtB,CACE1C,IADF,EAEEe,OAFF,EAGEpB,OAHF;AAAA;AAQEA,IAAAA,OAAO;AACLY,MAAAA,WAAW,EAAE;AADR,OAEFZ,OAFE,CAAP;AAMA;AACA;AACA;AACA;AACA;AACA;;2BAEagD,qBAAqB,CAAI3C,IAAJ,eAC7BL,OAD6B;AAEhCD,MAAAA,MAAM,EAAEqB,OAAO,CAACrB,MAFgB;AAGhC2B,MAAAA,aAAa,EAAEN,OAAO,CAACM;AAHS;AAKnC,GA1BD;AAAA;AAAA;AAAA;AAtCA,IAAsBsB,qBAAtB,YAAsBA,qBAAtB,CACE3C,IADF,EAEEL,OAFF;AAAA;;;AAOEA,IAAAA,OAAO;AACLY,MAAAA,WAAW,EAAE;AADR,OAEFZ,OAFE,CAAP;2BAKsBI,6BAA6B,CACjDC,IADiD,EAEjD,aAAAL,OAAO,SAAP,qBAASD,MAAT,oBAAoBC,OAApB,qBAAoB,UAAS0B,aAA7B,IAA6C1B,OAAO,CAACD,MAArD,GAA8DkD,SAFb,kBAA7CC;;;AAKN,UAAI,CAACA,OAAL,EAAc;AACZ,cAAM,IAAI7D,KAAJ,8BAAqCgB,IAArC,iBAAN;AACD;;AAED,UAAMJ,GAAG,GAAGC,QAAQ,CAACgD,OAAD,4BACflD,OADe,qBACf,UAASc,MADM,EAApB;;mBAIuBjC;0BAAMoB,GAAG,CAACrB,QAAJ;;6BACZe,YAAY,CAACK,OAAD;+BADN,sBAAsB;AAC3ChB,UAAAA,OAAO;AADoC,SAAtB,kBAAjBG;AAIN,cAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,kBAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACD;;iCAEkBH,QAAQ,CAACI,IAAT,mBAAbA;AAEN,mBAAOS,OAAO,CAACY,WAAR,GAAsBA,WAAW,CAACrB,IAAD,CAAjC,GAA0CA,IAAjD;;;;;AACD,GApCD;AAAA;AAAA;AAAA;;ICVsB4D,mBAAtB,YAAsBA,mBAAtB,CACEC,KADF,EAEEhC,OAFF,EAGEpB,OAHF;AAAA,MAGEA,OAHF;AAGEA,IAAAA,OAHF,GAMM,EANN;AAAA;;AAAA;AAQE,QAAI,OAAOoD,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,MAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACD;;2BAEmBC,OAAO,CAACC,GAAR,CAClBF,KAAK,CAACP,GAAN,WAAiBxC,IAAjB;AAAA;;;;oDAgCsBgD,OAAO,CAACC,GAAR,CAClBlC,OAAO,CAACmC,OAAR,CAAgBV,GAAhB,WAA2B9C,MAA3B;AAAA;qCAC0BiD,qBAAqB,CAAC3C,IAAD;AAC3CO,gBAAAA,WAAW,EAAE,IAD8B;AAE3Cb,gBAAAA,MAAM,EAANA,MAF2C;AAG3C2B,gBAAAA,aAAa,EAAEN,OAAO,CAACM;AAHoB,iBAIxC1B,OAJwC,mBAAvCwD;AAON,uBAAOC,uBAAuB,CAACD,SAAD,EAAYzD,MAAZ,CAA9B;;AACD,aATD;AAAA;AAAA;AAAA,YADkB,kBAAd2D;AAaN,mBAAOA,KAAK,CAACC,IAAN,EAAP;;;;;;AA5CA;AACA3D,QAAAA,OAAO,CAACc,MAAR,mDACaT,IADb,UACuB,MADvB,0BAEKL,OAFL,qBAEK,SAASc,MAFd;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;;;cACI,sBAACM,OAAO,CAACmC,OAAT,qBAAC,iBAAiBX,MAAlB;mCACsBI,qBAAqB,CAAC3C,IAAD;AAC3CO,cAAAA,WAAW,EAAE;AAD8B,eAExCZ,OAFwC,mBAAvCwD;;qBAKCC,uBAAuB,CAACD,SAAD;;;;;;AAiBjC,OA9CD;AAAA;AAAA;AAAA,MADkB,kBAAdE;AAkDN,aAAOA,KAAK,CAACC,IAAN,EAAP;;AACD,GA/DD;AAAA;AAAA;AAAA;;AAiEA,SAASF,uBAAT,CAAiCD,SAAjC,EAA4CzD,MAA5C;AACE,SAAOyD,SAAP,oBAAOA,SAAS,CAAEI,OAAX,CAAmB,UAACC,QAAD;;;AACxB,QAAMvC,IAAI,GACR,CAAAuC,QAAQ,QAAR,8BAAAA,QAAQ,CAAEhD,IAAV,oCAAgBiD,KAAhB,MAA0B7F,OAAO,CAACC,GAAR,CAAYyD,iBAAtC,GACI,GADJ,GAEIkC,QAFJ,uCAEIA,QAAQ,CAAEhD,IAFd,qBAEI,gBAAgBiD,KAHtB;AAKA,QAAMjD,IAAI,GAAG;AACXC,MAAAA,MAAM,EAAE;AACNQ,QAAAA,IAAI,EAAE,OAAGA,IAAH,oBAAGA,IAAI,CAAEyC,OAAN,CAAc,UAAd,EAA0B,EAA1B,CAAH,GAAmCC,KAAnC,CAAyC,GAAzC;AADA;AADG,KAAb;;AAMA,QAAIjE,MAAJ,EAAY;AACVc,MAAAA,IAAI,CAAC,QAAD,CAAJ,GAAiBd,MAAjB;AACD;;AAED,WAAOc,IAAP;AACD,GAjBM,CAAP;AAkBD;;ICiFqBoD,WAAtB,YAAsBA,WAAtB,CACE5D,IADF,EAEE6D,IAFF,EAGElE,OAHF;AAAA;;;AAQEA,IAAAA,OAAO;AACLY,MAAAA,WAAW,EAAE,IADR;AAELE,MAAAA,MAAM,EAAE;AAFH,OAGFd,OAHE,CAAP;2BAMsBI,6BAA6B,CACjDC,IADiD,EAEjD,cAAAL,OAAO,SAAP,sBAASD,MAAT,oBAAoBC,OAApB,qBAAoB,UAAS0B,aAA7B,IAA6C1B,OAAO,CAACD,MAArD,GAA8DkD,SAFb,kBAA7CC;;;AAKN,UAAI,CAACA,OAAL,EAAc;AACZ,cAAM,IAAI7D,KAAJ,8BAAqCgB,IAArC,iBAAN;AACD;;AAED,UAAMJ,GAAG,GAAGC,QAAQ,CAAIgD,OAAJ,SAAegB,IAAf,4BACflE,OADe,qBACf,UAASc,MADM,EAApB;;oBAIuBjC;2BAAMoB,GAAG,CAACrB,QAAJ;;6BACZe,YAAY,CAACK,OAAD;+BADN,wBAAsB;AAC3ChB,UAAAA,OAAO;AADoC,SAAtB,kBAAjBG;AAIN,cAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,kBAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACD;;iCAEkBH,QAAQ,CAACI,IAAT,mBAAbA;AAEN,mBAAOS,OAAO,CAACY,WAAR,GAAsBA,WAAW,CAACrB,IAAD,CAAjC,GAA0CA,IAAjD;;;;;AACD,GAtCD;AAAA;AAAA;AAAA;AAnGA,IAAsB4E,iBAAtB,YAAsBA,iBAAtB,CACEtD,IADF,EAEEb,OAFF;AAAA;;;AAQEA,IAAAA,OAAO;AACLY,MAAAA,WAAW,EAAE,IADR;AAELwD,MAAAA,aAAa,EAAE,KAFV;AAGLtD,MAAAA,MAAM,EAAE;AAHH,OAIFd,OAJE,CAAP;;AAOA,QAAI,CAACa,IAAL,EAAW;AACT,6BAAO,IAAP;AACD;;AAED,QACEb,OAAO,CAACD,MAAR,IACAC,OAAO,CAAC0B,aADR,IAEAb,IAAI,CAACwD,OAAL,CAAarE,OAAO,CAACD,MAArB,MAAiC,CAHnC,EAIE;AACAc,MAAAA,IAAI,GAAGA,IAAI,KAAK,GAAT,GAAeA,IAAf,GAAsBA,IAAI,CAACkD,OAAL,CAAa,MAAb,EAAqB,EAArB,CAA7B;AACAlD,MAAAA,IAAI,GAAGM,kBAAkB,CAAC;AACxBL,QAAAA,MAAM,EAAE;AAAEQ,UAAAA,IAAI,EAAE,CAACT,IAAD;AAAR,SADgB;AAExBd,QAAAA,MAAM,EAAEC,OAAO,CAACD,MAFQ;AAGxB2B,QAAAA,aAAa,EAAE1B,OAAO,CAAC0B;AAHC,OAAD,CAAzB;AAKD;;uCAE6D1B,4BAAA,UAASc;gDAA/DwD;QAAAA,qDAAkB;QAAyBxD;;AACnD,QAAMyD,cAAc,GAAG,IAAIC,eAAJ,cAClB1D,MADkB,EAAvB;;AAIA,QAAId,OAAO,CAACoE,aAAZ,EAA2B;AACzBG,MAAAA,cAAc,CAAC9E,GAAf,CAAmB,iBAAnB,EAAsC6E,eAAtC;AACD;;AAED,QAAMG,OAAO,GAAG,CACd;AACEC,MAAAA,SAAS,EAAE,QADb;AAEEC,MAAAA,MAAM,EAAE,MAFV;AAGEC,MAAAA,GAAG,mCAAiC/D,IAAjC,kBAHL;AAIE7B,MAAAA,OAAO,EAAE;AAAE6F,QAAAA,MAAM,EAAE;AAAV;AAJX,KADc,EAOd;AACEH,MAAAA,SAAS,EAAE,kBADb;AAEEC,MAAAA,MAAM,EAAE,MAFV;AAGEC,MAAAA,GAAG,4CAA0CL,cAAc,CAAC3F,QAAf,EAH/C;AAIEkG,MAAAA,OAAO,EAAE,CAAC,QAAD;AAJX,KAPc,CAAhB;AAgBA;AACA;;AACA,QAAIC,eAAe,GAAG,cAAtB;;AACA,QACE/E,OAAO,CAACD,MAAR,IACAC,OAAO,CAAC0B,aADR,IAEA1B,OAAO,CAACD,MAAR,KAAmBC,OAAO,CAAC0B,aAH7B,EAIE;AACAqD,MAAAA,eAAe,SAAO/E,OAAO,CAACD,MAAf,iBAAf;AACD;;AAED,QAAME,GAAG,GAAGC,QAAQ,CAAC6E,eAAD,EAAkB;AACpCC,MAAAA,OAAO,EAAE;AAD2B,KAAlB,CAApB;;kBAIuBnG;yBAAMoB,GAAG,CAACrB,QAAJ;;2BAGZe,YAAY,CAACK,OAAD;6BAHN,wBAAsB;AAC3CjB,QAAAA,MAAM,EAAE,MADmC;AAE3CkG,QAAAA,WAAW,EAAE,SAF8B;AAG3CjG,QAAAA,OAAO,eAHoC;AAI3CkG,QAAAA,QAAQ,EAAE,QAJiC;AAK3ChG,QAAAA,IAAI,EAAEiG,IAAI,CAACjE,SAAL,CAAeuD,OAAf;AALqC,OAAtB,kBAAjBtF;AAQN,YAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,gBAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACD;;+BAEkBH,QAAQ,CAACI,IAAT,mBAAbA;;;AAEN,cAAI,CAACA,IAAI,CAAC,yBAAD,CAAT,EAAsC;AACpC,mBAAO,IAAP;AACD;;AAED,cAAM8C,IAAI,GAAG8C,IAAI,CAACC,KAAL,0BAAW7F,IAAI,CAAC,yBAAD,CAAf,qBAAW,sBAAiCL,IAA5C,CAAb;;AAEA,cAAImD,IAAI,CAACgD,MAAT,EAAiB;AACf,kBAAM,IAAIhG,KAAJ,CAAUgD,IAAI,CAACgD,MAAL,CAAY,CAAZ,EAAeC,MAAzB,CAAN;AACD;;AAED,iBAAOtF,OAAO,CAACY,WAAR,GAAsBA,WAAW,CAACyB,IAAD,CAAjC,GAA0CA,IAAjD;;;;AACD,GAjGD;AAAA;AAAA;AAAA;AAvDA,IAAsBkD,sBAAtB,YAAsBA,sBAAtB,CACElF,IADF,EAEEe,OAFF,EAGEpB,OAHF;AAAA;;;AAWEA,IAAAA,OAAO;AACLY,MAAAA,WAAW,EAAE,IADR;AAEL;AACA;AACAwD,MAAAA,aAAa,EAAE,UAAUoB,IAAV,CAAenF,IAAf;AAJV,OAKFL,OALE,CAAP;AAQA,QAAMa,IAAI,GAAGM,kBAAkB,CAACC,OAAD,cAAUpB,OAAV,qBAAU,SAASqB,MAAnB,CAA/B;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMoE,WAAW,GAAGrE,OAAO,CAACqE,WAA5B;2BAEuBtB,iBAAiB,CAAItD,IAAJ,EAAU;AAChDD,MAAAA,WAAW,EAAEZ,OAAO,CAACY,WAD2B;AAEhDwD,MAAAA,aAAa,EAAEpE,OAAO,CAACoE,aAFyB;AAGhDrE,MAAAA,MAAM,EAAEqB,OAAO,CAACrB,MAHgC;AAIhD2B,MAAAA,aAAa,EAAEN,OAAO,CAACM,aAJyB;AAKhDZ,MAAAA,MAAM;AACJwD,QAAAA,eAAe,EAAEmB,WAAF,oBAAEA,WAAW,CAAEnB;AAD1B,sBAEDtE,OAFC,qBAED,UAASc,MAFR;AAL0C,KAAV,kBAAlC+C;aAiBF,CAACzC,OAAO,CAACrB,MAAT,IAAmB,EAAC8D,QAAD,oBAACA,QAAQ,CAAE6B,gBAAX,IACd,OAGF7B;;AATP;AACA;AACA;AACA;AACA;AAMD,GArDD;AAAA;AAAA;AAAA;;ICmDsB8B,qBAAtB,YAAsBA,qBAAtB,CACErE,IADF,EAEEtB,OAFF;AAAA;2BAIuBmE,iBAAiB,CAAC7C,IAAD,EAAOtB,OAAP,kBAAhC4F;AAEN,UAAI,CAACA,MAAL,EAAa;AACX,eAAO,IAAP;AACD;;AAED,UAAI,EAACA,MAAD,oBAACA,MAAM,CAAE/E,IAAT,CAAJ,EAAmB;AACjB,cAAM,IAAIxB,KAAJ,2DACoDuG,MAAM,CAACvF,IAD3D,CAAN;AAGD;;AAED,aAAO,CAAAuF,MAAM,QAAN,YAAAA,MAAM,CAAEF,gBAAR,IACHE,MAAM,CAAC/E,IAAP,CAAYiD,KADT,SAEC8B,MAAM,CAAC/E,IAAP,CAAYgF,QAFb,GAEwBD,MAAM,CAAC/E,IAAP,CAAYiD,KAF3C;;AAGD,GAnBD;AAAA;AAAA;AAAA;AAnDA,IAAsBgC,cAAtB,YAAsBA,cAAtB,CACEC,OADF,EAEE5G,QAFF,EAGEa,OAHF;AAAA;yBAKmE+F,OAAO,CAACC;QAAjE1E,sBAAAA;QAAMgD,iCAAAA;QAAiB2B,wBAAAA;QAAQlG,wBAAAA;QAAQ2B,+BAAAA;;AAE/C,QAAIuE,MAAM,KAAKhI,OAAO,CAACC,GAAR,CAAYgI,qBAA3B,EAAkD;AAChD,6BAAO/G,QAAQ,CAACgH,MAAT,CAAgB,GAAhB,EAAqB5G,IAArB,CAA0B;AAC/B6G,QAAAA,OAAO,EAAE,CAAApG,OAAO,QAAP,YAAAA,OAAO,CAAEqG,aAAT,CAAuBJ,MAAvB,KAAiC;AADX,OAA1B,CAAP;AAGD;;AAED,QAAI,CAAC3E,IAAL,EAAW;AACT,6BAAOnC,QAAQ,CACZgH,MADI,CACG,GADH,EAEJG,GAFI,CAEA;AAAEF,QAAAA,OAAO,EAAE,CAAApG,OAAO,QAAP,YAAAA,OAAO,CAAEqG,aAAT,CAAuB/E,IAAvB,KAA+B;AAA1C,OAFA,CAAP;AAGD;;AAED,QAAIiF,QAAQ,GAAiC;AAC3CnC,MAAAA,aAAa,EAAE,OAAOE,eAAP,KAA2B;AADC,KAA7C;;AAGA,QAAIvE,MAAM,IAAI2B,aAAd,EAA6B;AAC3B6E,MAAAA,QAAQ,gBACHA,QADG;AAENxG,QAAAA,MAAM,EAAEA,MAFF;AAGN2B,QAAAA,aAAa,EAAEA;AAHT,QAAR;AAKD;;2BAEiBiE,qBAAqB,CAACrE,IAAD,EAAiBiF,QAAjB,kBAAjCtG;AAEN,UAAI,CAACA,GAAL,EAAU;AACRd,QAAAA,QAAQ,CACLgH,MADH,CACU,GADV,EAEGG,GAFH,CAEO;AAAEF,UAAAA,OAAO,EAAE,CAAApG,OAAO,QAAP,YAAAA,OAAO,CAAEqG,aAAT,CAAuB/E,IAAvB,KAA+B;AAA1C,SAFP;AAGD;;AAEDnC,MAAAA,QAAQ,CAACqH,cAAT,CAAwB;AACtBlC,QAAAA,eAAe,EAAfA;AADsB,OAAxB;AAIAnF,MAAAA,QAAQ,CAACsH,SAAT,CAAmB,GAAnB,EAAwB;AAAEC,QAAAA,QAAQ,EAAEzG;AAAZ,OAAxB;AAEA,aAAOd,QAAQ,CAACmH,GAAT,EAAP;;AACD,GA7CD;AAAA;AAAA;AAAA;AAJA,SAAgBK,cAAc3G;AAC5B,SAAO,UAAC+F,OAAD,EAAU5G,QAAV;AAAA,WAAuB2G,cAAc,CAACC,OAAD,EAAU5G,QAAV,EAAoBa,OAApB,CAArC;AAAA,GAAP;AACD;;ICTqB4G,0BAAtB,YAAsBA,0BAAtB,CACExF,OADF,EAEEpB,OAFF;AAAA;AAOEA,IAAAA,OAAO;AACLqB,MAAAA,MAAM,EAAE;AADH,OAEFrB,OAFE,CAAP;AAIA,QAAMC,GAAG,GAAGC,QAAQ,CAAC,wBAAD,EAA2B;AAC7CW,MAAAA,IAAI,EAAEM,kBAAkB,CAACC,OAAD,EAAUpB,OAAO,CAACqB,MAAlB;AADqB,KAA3B,CAApB;;kBAIuBxC;yBAAMoB,GAAG,CAACrB,QAAJ;;2BACZe,YAAY,CAACK,OAAD;6BADN,wBAAsB;AAC3ChB,QAAAA,OAAO;AADoC,OAAtB,kBAAjBG;AAIN,YAAIA,QAAQ,CAACgH,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,iBAAO,IAAP;AACD;;AAED,YAAI,CAAChH,QAAQ,CAACC,EAAd,EAAkB;AAChB,gBAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACD;;+BAEkBH,QAAQ,CAACI,IAAT,mBAAbA;AAEN,iBAAOA,IAAI,CAACsH,OAAL,CAAaC,YAApB;;;;AACD,GA9BD;AAAA;AAAA;AAAA;;ICDsBC,OAAtB,YAAsBA,OAAtB,CACE5E,IADF,EAEEnC,OAFF;AAAA;;;AAgBEA,IAAAA,OAAO;AACLY,MAAAA,WAAW,EAAE;AADR,OAEFZ,OAFE,CAAP;AAKA,QAAMoC,YAAY,GAChB,aAAApC,OAAO,SAAP,qBAASD,MAAT,KAAmBC,OAAO,CAACD,MAAR,KAAmBC,OAAO,CAAC0B,aAA9C,SACQ1B,OAAO,CAACD,MADhB,GAEI,EAHN;;sBAK4BoC,IAAI,CAAC6B,KAAL,CAAW,IAAX;QAArBgD;QAAQC;;AAEf,QAAMhH,GAAG,GAAGC,QAAQ,CACfkC,YADe,uBACe4E,MADf,SACyBC,SADzB,EAElBjH,OAAO,CAACc,MAFU,CAApB;;kBAKuBjC;yBAAMoB,GAAG,CAACrB,QAAJ;;2BACZe,YAAY,CAACK,OAAD;6BADN,wBAAsB;AAC3ChB,QAAAA,OAAO;AADoC,OAAtB,kBAAjBG;AAIN,YAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,gBAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACD;;+BAEkBH,QAAQ,CAACI,IAAT,mBAAb8C;AAEN,cAAM6E,OAAO,GAAGlH,OAAO,CAACY,WAAR,GAAsBA,WAAW,CAACyB,IAAD,CAAjC,GAA0CA,IAA1D;AAEA,iBAAO;AACL6E,YAAAA,OAAO,EAAPA,OADK;AAELC,YAAAA,IAAI,EAAE9E,IAAI,CAAC8E,IAFN;AAGL5G,YAAAA,KAAK,EAAE8B,IAAI,CAAC9B;AAHP,WAAP;;;;AAKD,GAlDD;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;ACGA,SAAgB6G,QACdjF;AAOA,MAAMkF,QAAM,GAAGC,gBAAS,EAAxB;;wBACwBC,cAAA,CAGrB,IAHqB;MAAjBlF;MAAMmF;;yBAIaD,cAAA,CAAe,IAAf;MAAnBE;MAAOC;;yBACoBH,cAAA,CAAwB,KAAxB;MAA3BI;MAAWC;;AAElBL,EAAAA,eAAA,CAAgB;AACd,QAAMM,cAAc,YAAdA,cAAc;AAAA;AAClBD,QAAAA,YAAY,CAAC,IAAD,CAAZ;;wCACI;AAAA,iCACiB1F,OAAO,CAACC,IAAD,EAAO;AAC/BpC,YAAAA,MAAM,EAAEsH,QAAM,CAACtH,MADgB;AAE/B2B,YAAAA,aAAa,EAAE2F,QAAM,CAAC3F;AAFS,WAAP,CADxB,iBACIW,IADJ;AAKFmF,YAAAA,OAAO,CAACnF,IAAD,CAAP;AACAuF,YAAAA,YAAY,CAAC,KAAD,CAAZ;AANE;AAOH,qBAAQH,OAAO;AACdC,UAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;;AACF,OAbmB;AAAA;AAAA;AAAA,KAApB;;AAcAC,IAAAA,cAAc;AACf,GAhBD,EAgBG,CAACR,QAAM,CAACtH,MAAR,CAhBH;AAkBA,sBAAYsC,IAAZ;AAAkBoF,IAAAA,KAAK,EAALA,KAAlB;AAAyBE,IAAAA,SAAS,EAATA;AAAzB;AACD;;;;;;;;;;;;;;;;;;;;;;"}